(function () {
  'use strict';

  var attributeExceptions = ["role"];

  function appendText(el, text) {
    var textNode = document.createTextNode(text);
    el.appendChild(textNode);
  }

  function appendArray(el, children) {
    children.forEach(function (child) {
      if (Array.isArray(child)) {
        appendArray(el, child);
      } else if (child instanceof window.Element) {
        el.appendChild(child);
      } else if (typeof child === "string") {
        appendText(el, child);
      }
    });
  }

  function setStyles(el, styles) {
    if (!styles) {
      el.removeAttribute("styles");
      return;
    }

    Object.keys(styles).forEach(function (styleName) {
      if (styleName in el.style) {
        el.style[styleName] = styles[styleName]; // eslint-disable-line no-param-reassign
      }
    });
  }

  function makeElement(type, textOrPropsOrChild) {
    var el = document.createElement(type);

    if (Array.isArray(textOrPropsOrChild)) {
      appendArray(el, textOrPropsOrChild);
    } else if (textOrPropsOrChild instanceof window.Element) {
      el.appendChild(textOrPropsOrChild);
    } else if (typeof textOrPropsOrChild === "string") {
      appendText(el, textOrPropsOrChild);
    } else if (typeof textOrPropsOrChild === "object") {
      Object.keys(textOrPropsOrChild).forEach(function (propName) {
        if (propName in el || attributeExceptions.includes(propName)) {
          var value = textOrPropsOrChild[propName];

          if (propName === "style") {
            setStyles(el, value);
          } else if (value) {
            el[propName] = value;
          }
        }
      });
    }

    for (var _len = arguments.length, otherChildren = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      otherChildren[_key - 2] = arguments[_key];
    }

    if (otherChildren) appendArray(el, otherChildren);

    return el;
  }
  /* eslint-disable no-unused-vars */

  var a = function a() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return makeElement.apply(undefined, ["a"].concat(args));
  };
  var div = function div() {
    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return makeElement.apply(undefined, ["div"].concat(args));
  };
  var h1 = function h1() {
    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    return makeElement.apply(undefined, ["h1"].concat(args));
  };
  var header = function header() {
    for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }

    return makeElement.apply(undefined, ["header"].concat(args));
  };
  /* eslint-disable no-unused-vars */

  var Header = function Header(props) {
    return header({ className: 'header' }, h1({ className: 'header__title' }, 'Know It All'), a({
      className: 'header__help',
      target: '_blank',
      rel: 'noopener noreferrer',
      title: 'Find out more about know it all, version ' + props.version,
      href: 'https://hackernoon.com/what-you-dont-know-about-web-development-d7d631f5d468#.ex2yp6d64'
    }, 'What is this??'));
  };

  var Table = function Table(props) {
    return div({ className: 'skill-table' }, props.rows);
  };

  var App = function App(props) {
    return div({ id: 'app' }, Header({ version: props.version }), Table({ rows: props.rows }));
  };

  document.body.appendChild(App('someData'));

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
